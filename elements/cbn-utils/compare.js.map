{"version":3,"file":"compare.js","sourceRoot":"","sources":["compare.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,OAAO,CAAC,CAAuB,EAAE,CAAuB;IACpE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACzC,qEAAqE;QACrE,OAAO,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;IAChC,CAAC;IACD,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IAElB,OAAO,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;AAC7B,CAAC;AAED,SAAS,UAAU,CAAC,CAAuB;IACvC,MAAM,YAAY,GAAG,YAAY,CAAC;IAClC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;QACxB,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC;SAAM,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC;QACnD,OAAO,EAAE,CAAC;IACd,CAAC;SAAM,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;QAC/B,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE;YAC/D,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;gBACzB,OAAO,CAAC,YAAY,GAAG,SAAS,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;YACrE,CAAC;iBAAM,CAAC;gBACJ,OAAO,CAAC,YAAY,GAAG,SAAS,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,QAAQ,GAAG,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,CAAA;YACzI,CAAC;QAEL,CAAC,CAAC,CAAC;IACP,CAAC;IACD,OAAO,CAAC,CAAC;AACb,CAAC;AAMD,MAAM,UAAU,cAAc,CAAC,GAAW;IACtC,OAAO,CAAC,CAAgB,EAAE,CAAgB,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;AAC1E,CAAC","sourcesContent":["type CompareAcceptedTypes = number | string | null | undefined\n\nexport function compare(a: CompareAcceptedTypes, b: CompareAcceptedTypes) {\n    if (!isNaN(Number(a)) && !isNaN(Number(a))) {\n        //both can be converted to numbers, so we can compare them as numbers\n        return Number(a) - Number(b)\n    }\n    a = padNumbers(a);\n    b = padNumbers(b);\n\n    return a.localeCompare(b)\n}\n\nfunction padNumbers(a: CompareAcceptedTypes) {\n    const paddingValue = \"0000000000\";\n    if (typeof a === \"number\") {\n        return (paddingValue + a).slice(-paddingValue.length);\n    } else if (a === undefined || a === null || a === \"\") {\n        return \"\";\n    } else if (typeof a === \"string\") {\n        a = a.replace(/(\\d+)(?:\\.(\\d+))?/g, (match, beforeDot, afterDot) => {\n            if (afterDot === undefined) {\n                return (paddingValue + beforeDot * 1).slice(-paddingValue.length)\n            } else {\n                return (paddingValue + beforeDot * 1).slice(-paddingValue.length) + \".\" + (afterDot + paddingValue).substring(0, paddingValue.length)\n            }\n\n        });\n    }\n    return a;\n}\n\ntype CompareObject = {\n    [key: string]: CompareAcceptedTypes;\n}\n\nexport function sortCompareObj(key: string) {\n    return (a: CompareObject, b: CompareObject) => compare(a[key], b[key])\n}"]}