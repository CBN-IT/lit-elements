{"version":3,"file":"compare.js","sourceRoot":"","sources":["compare.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,OAAO,CAAC,CAAuB,EAAE,CAAuB,EAAE,WAAW,GAAC,KAAK;IACvF,IAAI,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,EAAE,CAAC;QACrD,OAAO,CAAC,GAAG,CAAC,CAAA;IAChB,CAAC;IAED,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IAElB,IAAG,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAC,CAAC;QAC/C,OAAO,CAAC,CAAC;IACb,CAAC;IAED,IAAI,WAAW,EAAE,CAAC;QACd,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAA;IACzD,CAAC;SAAM,CAAC;QACJ,OAAO,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;IAC7B,CAAC;AACL,CAAC;AAED,SAAS,UAAU,CAAC,CAAuB;IACvC,MAAM,YAAY,GAAG,YAAY,CAAC;IAClC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;QACxB,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC;SAAM,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC;QACnD,OAAO,EAAE,CAAC;IACd,CAAC;SAAM,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;QAC/B,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE;YACtE,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;gBACzB,OAAO,CAAC,YAAY,GAAG,SAAS,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;YACrE,CAAC;iBAAM,CAAC;gBACJ,OAAO,CAAC,YAAY,GAAG,SAAS,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,QAAQ,GAAG,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,CAAA;YACzI,CAAC;QAEL,CAAC,CAAC,CAAC;IACP,CAAC;IACD,OAAO,CAAC,CAAC;AACb,CAAC;AAMD,MAAM,UAAU,cAAc,CAAC,GAAW,EAAE,EAAC,WAAW,GAAG,KAAK,EAAE,SAAS,GAAG,IAAI,EAAC;IAC/E,OAAO,CAAC,CAAgB,EAAE,CAAgB,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,CAAA;AAC9G,CAAC","sourcesContent":["type CompareAcceptedTypes = number | string | null | undefined\r\n\r\nexport function compare(a: CompareAcceptedTypes, b: CompareAcceptedTypes, insensitive=false) {\r\n    if ((typeof a === \"number\") && (typeof b === \"number\")) {\r\n        return a - b\r\n    }\r\n\r\n    a = padNumbers(a);\r\n    b = padNumbers(b);\r\n\r\n    if(typeof a !== \"string\" || typeof b !== \"string\"){\r\n        return 0;\r\n    }\r\n\r\n    if (insensitive) {\r\n        return a.toLowerCase().localeCompare(b.toLowerCase())\r\n    } else {\r\n        return a.localeCompare(b)\r\n    }\r\n}\r\n\r\nfunction padNumbers(a: CompareAcceptedTypes) {\r\n    const paddingValue = \"0000000000\";\r\n    if (typeof a === \"number\") {\r\n        return (paddingValue + a).slice(-paddingValue.length);\r\n    } else if (a === undefined || a === null || a === \"\") {\r\n        return \"\";\r\n    } else if (typeof a === \"string\") {\r\n        a = a.trim().replace(/(\\d+)(?:\\.(\\d+))?/g, (match, beforeDot, afterDot) => {\r\n            if (afterDot === undefined) {\r\n                return (paddingValue + beforeDot * 1).slice(-paddingValue.length)\r\n            } else {\r\n                return (paddingValue + beforeDot * 1).slice(-paddingValue.length) + \".\" + (afterDot + paddingValue).substring(0, paddingValue.length)\r\n            }\r\n\r\n        });\r\n    }\r\n    return a;\r\n}\r\n\r\ntype CompareObject = {\r\n    [key: string]: CompareAcceptedTypes;\r\n}\r\n\r\nexport function sortCompareObj(key: string, {insensitive = false, ascending = true}) {\r\n    return (a: CompareObject, b: CompareObject) => (ascending ? 1 : -1) * compare(a[key], b[key], insensitive)\r\n}"]}